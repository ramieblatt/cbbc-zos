'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Release = require('./Release');

var _Release2 = _interopRequireDefault(_Release);

var _Logger = require('../utils/Logger');

var _Logger2 = _interopRequireDefault(_Logger);

var _Contracts = require('../utils/Contracts');

var _Contracts2 = _interopRequireDefault(_Contracts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = new _Logger2.default('ReleaseDeployer');

const ReleaseDeployer = {
  async deployLocal(contracts, txParams = {}) {
    this.txParams = txParams;
    await this.deployRelease();
    await this.deployAndRegisterContracts(contracts, this._deployLocalContract);
    return new _Release2.default(this.release, txParams);
  },

  async deployDependency(contracts, dependencyName, txParams) {
    this.txParams = txParams;
    this.dependencyName = dependencyName;
    await this.deployRelease();
    await this.deployAndRegisterContracts(contracts, this._deployDependencyContract);
    return new _Release2.default(this.release, txParams);
  },

  async deployRelease() {
    log.info("Deploying a new Release...");
    const Release = _Contracts2.default.getFromLib('Release');
    this.release = await Release.new(this.txParams);
    log.info(`Deployed at ${this.release.address}`);
  },

  async deployAndRegisterContracts(contracts, deployContract) {
    await Promise.all(contracts.map(async contract => {
      const { alias: contractAlias, name: contractName } = contract;
      const implementation = await deployContract(contractName);
      log.info('Registering implementation in release...');
      await this.release.setImplementation(contractAlias, implementation.address, this.txParams);
    }));
  },

  async _deployLocalContract(contractName) {
    const contractClass = _Contracts2.default.getFromLib(contractName);
    return await ReleaseDeployer._deployContract(contractName, contractClass);
  },

  async _deployDependencyContract(contractName) {
    const contractClass = await _Contracts2.default.getFromNodeModules(ReleaseDeployer.dependencyName, contractName);
    return await ReleaseDeployer._deployContract(contractName, contractClass);
  },

  async _deployContract(contractName, contractClass) {
    log.info(`Deploying new ${contractName}...`);
    const implementation = await contractClass.new();
    log.info(`Deployed ${contractName} ${implementation.address}`);
    return implementation;
  }
};

exports.default = ReleaseDeployer;