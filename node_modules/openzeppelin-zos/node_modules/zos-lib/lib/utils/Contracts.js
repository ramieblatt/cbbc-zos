'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _truffleContract = require('truffle-contract');

var _truffleContract2 = _interopRequireDefault(_truffleContract);

var _truffleProvisioner = require('truffle-provisioner');

var _truffleProvisioner2 = _interopRequireDefault(_truffleProvisioner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_TESTING_TX_PARAMS = {
  gas: 6721975,
  gasPrice: 100000000000
};

exports.default = {
  getFromLocal(contractName) {
    const buildDir = `${process.cwd()}/build/contracts/`;
    return this._getFromBuildDir(buildDir, contractName);
  },

  getFromLib(contractName) {
    const buildDir = _path2.default.resolve(__dirname, '../../build/contracts');
    return this._getFromBuildDir(buildDir, contractName);
  },

  getFromNodeModules(dependency, contractName) {
    const buildDir = `${process.cwd()}/node_modules/${dependency}/build/contracts`;
    return this._getFromBuildDir(buildDir, contractName);
  },

  _getFromBuildDir(buildDir, contractName) {
    const path = `${buildDir}/${contractName}.json`;
    const contract = (0, _truffleContract2.default)(require(path));
    return process.env.NODE_ENV === 'test' ? this._provideContractForTesting(contract) : this._provideContractForProduction(contract);
  },

  _provideContractForProduction(contract) {
    (0, _truffleProvisioner2.default)(contract, this._artifactsDefaults());
    return contract;
  },

  _provideContractForTesting(contract) {
    contract.setProvider(web3.currentProvider);
    contract.defaults(_extends({ from: web3.eth.accounts[0] }, DEFAULT_TESTING_TX_PARAMS));
    return contract;
  },

  _artifactsDefaults() {
    if (!artifacts) throw "Could not retrieve truffle defaults";
    return artifacts.options || {};
  }
};